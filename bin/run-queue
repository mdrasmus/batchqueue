#!/usr/bin/env python

import os
import sys
import time
from subprocess import call, check_call, Popen, PIPE
import shutil
import json
import tempfile
from collections import defaultdict
import optparse


# config
CURRENT_JOBS_CMD = "showq"
WHOAMI_CMD =  "whoami"
POLL_RATE = 60 # seconds
JOB_SUBMIT = "/bin/bash"


#=============================================================================
# job queue functions

def get_current_num_jobs():
    """Returns number of jobs currently running"""

    user = os.popen(WHOAMI_CMD).read().strip()

    try:
        s = Popen(CURRENT_JOBS_CMD, stdout=PIPE)
        njobs = 0
        for line in s.stdout:
            if user in line:
                njobs += 1
        return njobs
    except:
        raise Exception("cant get number of jobs right now")
    
    #return int(os.popen(CURRENT_JOBS_CMD).read())


def get_waiting_jobs(jobsdir):
    """Returns all jobs in queue"""
    jobs = []
    for x in os.listdir(jobsdir):
        fn = os.path.join(jobsdir, x)
        if os.path.isfile(fn):
            jobs.append(fn)
    jobs.sort()
    return jobs


def remove_job(job, donedir):
    """Remove a job from the queue"""
    shutil.move(job, donedir)


def submit_job(job):
    """Submit a job"""
    call([JOB_SUBMIT, job])


def run_queue(jobsdir, groupdir, donedir, maxjobs):
    """Poll job queue to create groups and submit jobs"""
    
    while True:
        # queue groups
        queue_groups(jobsdir, groupdir, donedir)

        print
        print "check queue", time.strftime("%Y/%m/%d %H:%M:%S")

        # determine jobs
        jobs = get_waiting_jobs(jobsdir)
        try:
            ncurrent = get_current_num_jobs()
        except:
            print "could not get number of current jobs, sleeping"
            time.sleep(POLL_RATE)
            continue
            
        nsubmit = min(len(jobs), max(maxjobs - ncurrent, 0))

        print "max jobs:", maxjobs
        print "running: ", ncurrent
        print "waiting: ", len(jobs)

        # submit jobs
        for i in range(nsubmit):
            print
            print "> submit %d:" % (i+1), os.path.basename(jobs[i])
            submit_job(jobs[i])
            remove_job(jobs[i], donedir)

        time.sleep(POLL_RATE)


def queue_groups(jobsdir, groupdir, donedir):
    """Create groups out of all jobs waiting for grouping"""

    # cluster into groups
    groups = defaultdict(lambda: [])
    jobs = [x for x in get_group_jobs(groupdir)]
    for job in jobs:
        groups[job["group"]].append(job)

    # queue each group
    for group, group_jobs in groups.items():
        group_size = group_jobs[0]["size"]
        for i in range(0, len(jobs), group_size):
            queue_group(jobsdir, donedir, jobs[i:i+group_size])


def queue_group(jobsdir, donedir, jobs):
    """Bundle jobs into group and queue group"""

    
    cmd = jobs[0]["cmd"]
    inputs = [j["input"] for j in jobs]
        
    group_input = make_group_input(inputs)
    input_lines = split_lines(group_input)
    groupjob = make_simple_job(jobsdir, cmd, input_lines, cwd=jobs[0]["cwd"])

    print
    print "create group %s (%d)" % (jobs[0]["group"], jobs[0]["size"])
    print "  group job:", os.path.basename(groupjob)
    for job in jobs:
        print "  subjob:", job["file"]


    for job in jobs:
        remove_group_job(donedir, job["file"])



#=============================================================================
# shell functions functions

def doublequote(text):
    """Wrap argument in doublequotes with propper escaping"""
    return '"' + text.replace("\\", "\\\\").replace('"', '\\"').replace("$", "\\$") + '"'


def make_cmdstr(cmd):
    return " ".join(doublequote(x) for x in cmd)


def unique_eof(lines):
    if ("EOF\n" not in lines) and ("EOF" not in lines):
        return "EOF"

    i = 2
    while True:
        eof = "EOF%d" % i
        if (eofstr + "\n" not in lines) and (eofstr not in lines):
            return eofstr
        i += 1

#=============================================================================
# job creation

def write_simple_job(fd, cmd, input_lines, cwd=None):
    cmdstr = make_cmdstr(cmd)
    if input_lines:
        eof = unique_eof(input_lines)
        cmdstr += " <<\"" + eof + "\"\n" + \
             "".join(input_lines) + "\n" + eof

    if cwd is None:
        cwd = os.getcwd()
    
    os.write(fd, "# submitted: %s\n" % time.strftime("%Y/%m/%d %H:%M:%S"))
    os.write(fd, "cd %s\n" % doublequote(cwd))
    os.write(fd, cmdstr)


def make_simple_job(jobsdir, cmd, input_lines, cwd=None):
    prefix = time.strftime("%Y%m%d_%H%M%S_")
    fd, name = tempfile.mkstemp(".sh", prefix, jobsdir)
    write_simple_job(fd, cmd, input_lines, cwd=cwd)
    os.close(fd)
    return name


def read_job(jobfile):
    job = json.loads(open(jobfile).read())
    job["file"] = jobfile
    return job


def get_group_job_files(groupdir):
    files = [os.path.join(groupdir, x) for x in os.listdir(groupdir)]
    files.sort()
    return files

def get_group_jobs(groupdir):
    return [read_job(x) for x in get_group_job_files(groupdir)]


def make_group_input(inputs):
    group_input = "_pid=\n"
    group_input += "".join("(\n" + job_input + "\n) & \n_pid=\"$_pid \"$!\n"
                          for job_input in inputs)
    group_input += "for p in $_pid; do wait $p; done"
    return group_input

def split_lines(text):
    return [line + "\n" for line in text.split("\n")]

def remove_group_job(donedir, job):
    shutil.move(job, donedir)
    

#=============================================================================

o = optparse.OptionParser()
o.add_option("-d", "--dir", metavar="jobs_directory",
             default=os.environ["HOME"] + "/jobs")
o.add_option("-j", "--maxjobs", metavar="maximum_jobs_running",
             type="int", default=30)
o.add_option("-g", "--groupjobs", action="store_true")
conf, args = o.parse_args()



jobsdir = conf.dir
if not os.path.exists(jobsdir):  
    print >>sys.stderr, "ERROR: jobs directory '%s' does not exist. Please create it." % conf.dir
    print >>sys.stderr, "  mkdir %s" % jobsdir
    sys.exit(1)

donedir = os.path.join(jobsdir, "done")
groupdir = os.path.join(jobsdir, "groups")

# setup directories
if not os.path.exists(groupdir):
    os.mkdir(groupdir)
if not os.path.exists(donedir):
    os.mkdir(donedir)


if conf.groupjobs:
    # only group jobs
    queue_groups(jobsdir, groupdir, donedir)
else:
    # start queue process
    run_queue(jobsdir, groupdir, donedir, conf.maxjobs)
